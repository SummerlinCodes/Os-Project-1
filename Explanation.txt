Brandon Summerlin
Programming Assignment #1
Operating Systems
March 28th, 2025

Producer-Consumer Problem: Implementation Explanation

## Overview
This document details my implementation of the Producer-Consumer synchronization problem for Kent State University's Operating Systems course. The primary goal was to demonstrate inter-process communication (IPC), shared memory, and semaphore-based synchronization.

## Problem Statement
The producer-consumer problem involves two processes:
- A producer generates items and places them onto a shared buffer (table).
- A consumer retrieves and consumes these items.
- The shared table has a maximum capacity of two items.
- The producer waits when the table is full, and the consumer waits when the table is empty.

## Implementation Components

### 1. Shared Memory (`shared_memory.h`)
POSIX shared memory (`shm_open`, `mmap`) enables both producer and consumer processes to share a memory segment. The `SharedTable` structure defined in `shared_memory.h` holds:
- An array for two integer items (`items`)
- Indices (`in`, `out`) tracking producer insertion and consumer removal
- A boolean `isRunning` flag controlling shutdown

### 2. Semaphore Synchronization
I used three named POSIX semaphores (`sem_open`) for synchronization:
- **mutex**: Guarantees mutual exclusion, preventing simultaneous table access.
- **empty**: Counts available slots (initialized to 2, since the table size is 2).
- **full**: Counts occupied slots (initialized to 0).

### 3. Producer Implementation (`producer.cpp`)
The producer process:
- Initializes shared memory and semaphores.
- Starts a producer thread that:
  - Produces incrementing integers.
  - Waits if the table is full (`sem_wait(empty)`).
  - Locks the critical section (`sem_wait(mutex)`), places the item onto the table, and releases it (`sem_post(mutex)`).
  - Signals the consumer that an item is available (`sem_post(full)`).
  - Sleeps for a random duration (1–3 seconds).

### 4. Consumer Implementation (`consumer.cpp`)
The consumer process:
- Connects to the existing shared memory and semaphores.
- Starts a consumer thread that:
  - Waits if the table is empty (`sem_wait(full)`).
  - Locks the critical section (`sem_wait(mutex)`), retrieves an item from the table, and releases it (`sem_post(mutex)`).
  - Signals the producer that a slot is free (`sem_post(empty)`).
  - Consumes the retrieved item and sleeps randomly (1–5 seconds).

### Synchronization Mechanisms Explained
- **Mutual Exclusion**: Ensured by the mutex semaphore; only one thread accesses the buffer at any given time.
- **Buffer Management**: Semaphores `empty` and `full` manage buffer occupancy status, enforcing correct producer/consumer waiting conditions.
- **Circular Buffer**: Modulo arithmetic (`(index + 1) % TABLE_SIZE`) ensures efficient, cyclic use of buffer slots.

### Potential Issues and Solutions
- **Deadlock Avoidance**: Consistent semaphore acquisition order (first `empty`/`full`, then `mutex`) and immediate mutex release after critical sections prevent deadlocks.
- **Termination**: Processes handle SIGINT (`Ctrl+C`) to set `isRunning` to false, enabling clean termination.

### Compilation and Execution
A Makefile simplifies compilation (`make build`) and execution (`make run`). Manual commands for compilation and execution are provided in `README.md`.

### Windows Compatibility
POSIX functions used in this assignment (`pthread`, shared memory) are not native to Windows. For Windows environments, I recommend using:
- Windows Subsystem for Linux (WSL)
- VirtualBox with Linux
- Docker Linux container
